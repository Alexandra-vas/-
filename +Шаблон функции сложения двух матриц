#include <cstdio>
#include <cstdlib>
#include <ctime>

template <typename T>
void addMatrices(T** A, T** B, T** Result, int rows, int cols) 
{
    for (int i = 0; i < rows; ++i) 
    {
        for (int j = 0; j < cols; ++j) 
        {
            Result[i][j] = A[i][j] + B[i][j];
        }
    }
}

template <typename T>
T** allocateMatrix(int rows, int cols) 
{
    T** matrix = new T*[rows];
    for (int i = 0; i < rows; ++i) 
    {
        matrix[i] = new T[cols];
    }
    return matrix;
}

template <typename T>
void freeMatrix(T** matrix, int rows) 
{
    for (int i = 0; i < rows; ++i) 
    {
        delete[] matrix[i];
    }
    delete[] matrix;
}

int main() 
{
    const int rows = 3;
    const int cols = 3;
    
    srand(time(nullptr));

    int** A = allocateMatrix<int>(rows, cols);
    int** B = allocateMatrix<int>(rows, cols);
    int** Result = allocateMatrix<int>(rows, cols);

    for (int i = 0; i < rows; ++i) 
    {
        for (int j = 0; j < cols; ++j) 
        {
            A[i][j] = rand() % 100; 
            B[i][j] = rand() % 100;
        }
    }

    printf("Матрица A:\n");
    for (int i = 0; i < rows; ++i) 
    {
        for (int j = 0; j < cols; ++j) 
        {
            printf("%d ", A[i][j]);
        }
        printf("\n");
    }

    printf("Матрица B:\n");
    for (int i = 0; i < rows; ++i) 
    {
        for (int j = 0; j < cols; ++j) 
        {
            printf("%d ", B[i][j]);
        }
        printf("\n");
    }

    addMatrices<int>(A, B, Result, rows, cols);

    printf("Результат сложения:\n");
    for (int i = 0; i < rows; ++i) 
    {
        for (int j = 0; j < cols; ++j) 
        {
            printf("%d ", Result[i][j]);
        }
        printf("\n");
    }

    freeMatrix<int>(A, rows);
    freeMatrix<int>(B, rows);
    freeMatrix<int>(Result, rows);

    return 0;
}
