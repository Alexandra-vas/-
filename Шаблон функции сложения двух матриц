#include <iostream>
#include <vector>

template<typename T>
std::vector<std::vector<T>> addMatrices(const std::vector<std::vector<T>>& matrixA, const std::vector<std::vector<T>>& matrixB) 
{
    if (matrixA.size() != matrixB.size() || matrixA[0].size() != matrixB[0].size()) 
    {
        throw std::invalid_argument("Matrices must have the same dimensions.");
    }

    std::vector<std::vector<T>> result(matrixA.size(), std::vector<T>(matrixA[0].size()));

    for (size_t i = 0; i < matrixA.size(); ++i) 
    {
        for (size_t j = 0; j < matrixA[0].size(); ++j) 
        {
            result[i][j] = matrixA[i][j] + matrixB[i][j];
        }
    }

    return result;
}

int main() 
{
    std::vector<std::vector<int>> matrixA = 
    {
        {1, 2, 3},
        {4, 5, 6}
    };

    std::vector<std::vector<int>> matrixB = 
    {
        {7, 8, 9},
        {10, 11, 12}
    };

    try {
        std::vector<std::vector<int>> result = addMatrices(matrixA, matrixB);

        std::cout << "Resultant Matrix:\n";
        for (const auto& row : result) 
        {
            for (const auto& elem : row) 
            {
                std::cout << elem << " ";
            }
            std::cout << std::endl;
        }
    } catch (const std::invalid_argument& e) 
    {
        std::cerr << e.what() << std::endl;
    }

    return 0;
}
